package apiCloneIfood.controller;

import java.lang.reflect.Field;
import java.util.List;
import java.util.Map;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.util.ReflectionUtils;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.fasterxml.jackson.databind.ObjectMapper;

import apiCloneIfood.domain.model.Restaurante;
import apiCloneIfood.domain.services.RestauranteService;

@RestController
@RequestMapping("/restaurante")
public class RestauranteController {

	@Autowired
	private RestauranteService restauranteService;

	@GetMapping
	public List<Restaurante> listar() {
		return restauranteService.listar();

	}

	@GetMapping("/{restauranteId}")
	public Restaurante buscar(@PathVariable long restauranteId) {

		return restauranteService.buscar(restauranteId);

	}

	@PostMapping
	public void adicionar(@RequestBody Restaurante restaurante) {
		restauranteService.adicionar(restaurante);
	}

	@PutMapping("/{restauranteId}")
	public void atualizar(@PathVariable long restauranteId, @RequestBody Restaurante restaurante) {

		Restaurante restauranteAtual = restauranteService.buscar(restauranteId);

		BeanUtils.copyProperties(restaurante, restauranteAtual, "id");

		restauranteService.adicionar(restauranteAtual);

	}

	@DeleteMapping("/{restauranteId}")
	public void deletar(@PathVariable long restauranteId) {
		Restaurante restaurante = buscar(restauranteId);

		restauranteService.deletar(restaurante);

	}

	@PatchMapping("/{restauranteId}")
	public ResponseEntity<?> atualizarParcial(@PathVariable long restauranteId,
			@RequestBody Map<String, Object> campos) {
		Restaurante restauranteAtual = restauranteService.buscar(restauranteId);
		if (restauranteAtual == null) {
			return ResponseEntity.notFound().build();
		}

		merge(campos, restauranteAtual);
		atualizar(restauranteId, restauranteAtual);
		return ResponseEntity.ok().build();
	}

	private void merge(Map<String, Object> dadosOrigem, Restaurante restauranteAtual) {
		ObjectMapper objectMapper = new ObjectMapper();
		Restaurante restauranteOrigem = objectMapper.convertValue(dadosOrigem, Restaurante.class);
		
		dadosOrigem.forEach((nomePropriedade, valorPropiedade) -> {
			Field field = ReflectionUtils.findField(Restaurante.class, nomePropriedade);
			field.setAccessible(true);
			
			Object novoValor = ReflectionUtils.getField(field, restauranteOrigem);
			
			
			
			ReflectionUtils.setField(field, restauranteAtual, novoValor);
		});

	}
}
