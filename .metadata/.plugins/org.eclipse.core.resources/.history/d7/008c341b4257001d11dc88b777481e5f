package apiCloneIfood.controller;

import java.util.Optional;

import javax.persistence.EntityNotFoundException;

import java.lang.reflect.Field;
import java.util.List;
import java.util.Map;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.http.ResponseEntity;
import org.springframework.util.ReflectionUtils;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.fasterxml.jackson.databind.ObjectMapper;

import apiCloneIfood.domain.model.Cozinha;
import apiCloneIfood.domain.model.Restaurante;
import apiCloneIfood.domain.repository.RestauranteRepository;
import apiCloneIfood.domain.services.RestauranteService;

@RestController
@RequestMapping("/restaurante")
public class RestauranteController {

	@Autowired
	private RestauranteService restauranteService;

	@Autowired
	RestauranteRepository restauranteRepository;

	@GetMapping
	public List<Restaurante> listar() {
		return restauranteService.listar();

	}

	@GetMapping("/{restauranteId}")
	public ResponseEntity<Restaurante> buscar(@PathVariable long restauranteId) {
		Optional<Restaurante> restauranteAtual = restauranteRepository.findById(restauranteId);
		if (restauranteAtual.isPresent()) {
			ResponseEntity.ok().body(restauranteAtual.get());
		}

		return ResponseEntity.notFound().build();

	}
	

	@PostMapping
	public void adicionar(@RequestBody Restaurante restaurante) {
		restauranteService.adicionar(restaurante);

	}

	@PutMapping("/{restauranteId}")
	public ResponseEntity<Restaurante> atualizar(@PathVariable long restauranteId,
			@RequestBody Restaurante restaurante) {

		Optional<Restaurante> restauranteAtual = restauranteRepository.findById(restauranteId);
		if (restauranteAtual.isPresent()) {
			BeanUtils.copyProperties(restaurante, restauranteAtual.getClass(), "id");

			Restaurante restauranteComum = restauranteService.adicionar(restauranteAtual.get());

			return ResponseEntity.ok(restauranteComum);
		}
		return ResponseEntity.notFound().build();
	}

	@DeleteMapping("/{restauranteId}")

	public ResponseEntity<Restaurante> excluir(@PathVariable long restauranteId) {
		try {

			restauranteService.deletar(restauranteId);
			return ResponseEntity.noContent().build();
		} catch (EntityNotFoundException e) {
			return ResponseEntity.notFound().build();
		}

		catch (DataIntegrityViolationException e) {
			return ResponseEntity.badRequest().build();
		}

	}

//	@PatchMapping("/{restauranteId}")
//	public ResponseEntity<?> atualizarParcial(@PathVariable long restauranteId,
//			@RequestBody Map<String, Object> campos) {
//		Restaurante restauranteAtual = restauranteService.buscar(restauranteId);
//		if (restauranteAtual == null) {
//			return ResponseEntity.notFound().build();
//		}
//
//		merge(campos, restauranteAtual);
//		atualizar(restauranteId, restauranteAtual);
//		return ResponseEntity.ok().build();
//	}
//
//	private void merge(Map<String, Object> dadosOrigem, Restaurante restauranteAtual) {
//		ObjectMapper objectMapper = new ObjectMapper();
//		Restaurante restauranteOrigem = objectMapper.convertValue(dadosOrigem, Restaurante.class);
//		
//		dadosOrigem.forEach((nomePropriedade, valorPropiedade) -> {
//			Field field = ReflectionUtils.findField(Restaurante.class, nomePropriedade);
//			field.setAccessible(true);
//			
//			Object novoValor = ReflectionUtils.getField(field, restauranteOrigem);
//			
//			
//			
//			ReflectionUtils.setField(field, restauranteAtual, novoValor);
//		});
//
//	}
}
